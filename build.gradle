buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+',  changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'

group = 'org.muramasa.gti' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'tesseract'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tesseract {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tesseract {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tesseract', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"',
                    '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'

            mods {
                tesseract {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    testImplementation('junit:junit:4.11')

    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

static def getVersionAppendage() {
    if (System.env.GITHUB_ACTIONS) {
        return System.env.GITHUB_RUN_NUMBER
    }

    def proc = 'git rev-parse --short HEAD'.execute()
    proc.waitFor()
    return 'dev-' + (proc.exitValue() ? 'unknown' : proc.text.trim())
}

version = tesseract_version + '.' + getVersionAppendage()

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "tesseract",
                "Specification-Vendor": "gregtech-intergalactical",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${archiveVersion}",
                "Implementation-Vendor" :"gregtech-intergalactical",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Deobfuscated jar; development purposes.
task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    classifier "dev"
}

// Sources jar; development purposes.
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

// Maven publishing:
// (includes universal, development, sources)
publishing {
    publications {
        java(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            // Publish to GitHub Packages, quick and easy.
            name 'GitHubPackages'

            // TODO: Testing purposes, will migrate to base repository when approved.
            url 'https://maven.pkg.github.com/Axelandre42/TesseractAPI'

            credentials {
                username = System.env.GITHUB_ACTOR
                password = System.env.GITHUB_TOKEN
            }
        }
    }
}

artifacts {
    deobfJar
    sourcesJar
}